

services:
  app:
    container_name: app
    build:
      context: ./app
      args:
        - DEV=${DEV}
    ports:
      - "8001:8000"
    command: >
      sh -c "
      echo 'Waiting for database...' &&
      python manage.py wait_for_db &&
      echo 'Apply database migrations' &&
      python manage.py migrate &&
      echo 'Create default superuser' &&
      python manage.py create_default_superuser &&
      echo 'Start the server' &&
      python manage.py runserver 0.0.0.0:8000"
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SECRET_KEY=${SECRET_KEY}
      - DEV=${DEV}
    depends_on:
      - db

  celery_beat:
    container_name: celery_beat
    build:
      context: ./app
      args:
        - DEV=${DEV}
    command: >
      sh -c "
      echo 'Waiting for database...' &&
      python manage.py wait_for_db &&
      echo 'Waiting 30 seconds for migrations to be applied' &&
      sleep 30 &&
      celery -A app beat -l INFO"
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SECRET_KEY=${SECRET_KEY}
      - DEV=${DEV}
    depends_on:
      - db
      - rabbitmq

  celery_worker:
    container_name: celery_worker
    build:
      context: ./app
      args:
        - DEV=${DEV}
    command: >
      sh -c "
      echo 'Waiting for database...' &&
      python manage.py wait_for_db &&
      echo 'Waiting 30 seconds for migrations to be applied' &&
      sleep 30 &&
      celery -A app worker -Q random_data_api -l INFO --concurrency=1"
    environment:
      - DB_HOST=db
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - SECRET_KEY=${SECRET_KEY}
      - DEV=${DEV}
    depends_on:
      - db
      - rabbitmq

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq


  db:
    container_name: postgres
    image: postgres:15-alpine
    volumes:
      - dev-db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"

volumes:
  dev-db-data: